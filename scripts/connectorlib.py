"""
connectorlib.py
Copyright 2015 Adam Greig

Generate conn.lib, generic multi-pin connector symbols,
in a range of number of rows and pins.
"""

import sys
import datetime
import subprocess
import os.path


def git_version(libpath):
    args = ["git", "describe", "--abbrev=8", "--dirty=-dirty", "--always"]
    git = subprocess.Popen(args, cwd=libpath, stdout=subprocess.PIPE)
    return git.stdout.read().decode().strip()


def onerow(f, pincount):
    name = "CONN_01x{:02d}".format(pincount)
    f.write('#\n# {}\n#\n'.format(name))
    f.write('DEF {} J 0 1 Y N 1 F N\n'.format(name))
    f.write('F0 "J" -50 100 50 H V L CNN\n')
    name_y = -pincount * 100
    f.write('F1 "{}" -50 {} 50 H V L CNN\n'.format(name, name_y))
    f.write('DRAW\n')
    box_y = -(((pincount - 1) * 100) + 50)
    f.write('S 0 50 -50 {} 0 1 0 f\n'.format(box_y))
    for pin in range(pincount):
        pin_y = -pin * 100
        f.write('S 0 {} -25 {} 0 1 0 F\n'.format(pin_y+5, pin_y-5))
        f.write('X {} {} 100 {} 100 L 50 50 1 1 P\n'
                .format(pin+1, pin+1, pin_y))
    f.write('ENDDRAW\nENDDEF\n\n')


def tworow(f, pincount):
    name = "CONN_02x{:02d}".format(pincount)
    f.write('#\n# {}\n#\n'.format(name))
    f.write('DEF {} J 0 1 Y N 1 F N\n'.format(name))
    f.write('F0 "J" -100 100 50 H V L CNN\n')
    name_y = -pincount * 100
    f.write('F1 "{}" -100 {} 50 H V L CNN\n'.format(name, name_y))
    f.write('DRAW\n')
    box_y = -(((pincount - 1) * 100) + 50)
    f.write('S 0 50 -100 {} 0 1 0 f\n'.format(box_y))
    for pin in range(pincount):
        pin_y = -pin * 100
        f.write('S 0 {} -25 {} 0 1 0 F\n'.format(pin_y+5, pin_y-5))
        f.write('S -100 {} -75 {} 0 1 0 F\n'.format(pin_y+5, pin_y-5))
        pin_left = 2*pin + 1
        pin_right = 2*pin + 2
        f.write('X {} {} -200 {} 100 R 50 50 1 1 P\n'
                .format(pin_left, pin_left, pin_y))
        f.write('X {} {} 100 {} 100 L 50 50 1 1 P\n'
                .format(pin_right, pin_right, pin_y))
    f.write('ENDDRAW\nENDDEF\n\n')


def main(libpath):
    version = git_version(os.path.join(os.path.split(libpath)[-2]))
    f = open(libpath, "w")
    f.write("EESchema-LIBRARY Version 2.3\n")
    f.write("#encoding utf-8\n\n")
    f.write("#=====================================================\n")
    f.write("# Automatically generated by agg-kicad connectorlib.py\n")
    f.write("# on {}\n".format(datetime.datetime.now()))
    f.write("# using git version {}\n".format(version))
    f.write("# See github.com/adamgreig/agg-kicad\n")
    f.write("#=====================================================\n\n")

    for pincount in range(1, 11):
        onerow(f, pincount)
        tworow(f, pincount)

    f.write('# End Library\n')
    f.close()

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Usage: {} <lib path>".format(sys.argv[0]))
        sys.exit(1)

    main(sys.argv[1])
